#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import inspect
import logging
import argparse
from datetime import datetime

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(
    inspect.getfile(inspect.currentframe())))))
import pygh


def main():
    '''
    Executes the release using the command line arguments
    '''
    # Set up the argument parser
    parser = argparse.ArgumentParser(
        prog='pygh',
        description='Performs a release of a GitHub project',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    # The filenames
    parser.add_argument('category',
                        choices=('major', 'minor', 'patch'),
                        help='the type of release')
    parser.add_argument('--git-executable',
                        default=pygh.find_exe_in_path('git'),
                        help='the git executable to use')
    parser.add_argument('--path',
                        default=os.getcwd(),
                        help='the path to the repository to release')
    parser.add_argument(
        '--description',
        default=None,
        help='the markdown formatted description of the release')
    parser.add_argument('--date',
                        default=datetime.utcnow(),
                        help='the release date')
    parser.add_argument('--changelog',
                        default='CHANGELOG.md',
                        help='the name of the changelog to update')
    parser.add_argument('--token',
                        default=os.environ.get('GITHUB_TOKEN', None),
                        help='the GitHub token to perform the release with')
    try:
        repo = pygh.get_repo()
    except pygh.ExecuteCommandError:
        repo = None
    parser.add_argument('--repo',
                        default=repo,
                        help='the GitHub repository location')

    # Output
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-v',
                       '--verbose',
                       action='store_true',
                       help='increase output verbosity')
    group.add_argument('-q',
                       '--quiet',
                       action='store_true',
                       help='only print warnings and errors')

    # Convert to arguments to a dictionary so we can pop keywords
    args = dict(parser.parse_args().__dict__)

    # Set up the logger
    logger = logging.getLogger('release')
    handler = logging.StreamHandler()
    formatter = logging.Formatter('%(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    logger.setLevel(logging.INFO)
    if args.pop('verbose'):
        logger.setLevel(logging.DEBUG)
    if args.pop('quiet'):
        logger.setLevel(logging.WARN)

    # Run the verification
    try:
        pygh.release(logger=logger, **args)
    except IOError as e:
        sys.stderr.write('IO error: %s\n' % e)
        sys.exit(1)
    except OSError as e:
        sys.stderr.write('OS error: %s\n' % e)
        sys.exit(1)
    except pygh.ReleaseError as e:
        sys.stderr.write('Failed to release: %s\n' % e)
        sys.exit(1)
    except pygh.ExecuteCommandError as e:
        sys.stderr.write('%s: %s\n%s' % (e.message, ' '.join(e.cmd), e.err))
        sys.exit(1)


if __name__ == '__main__':
    main()
